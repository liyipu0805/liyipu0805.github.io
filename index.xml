<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>念旧&#39;s Blog</title>
    <link>https://liyipu0805.github.io/</link>
    <description>Recent content on 念旧&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 23 Nov 2022 15:34:49 +0800</lastBuildDate><atom:link href="https://liyipu0805.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2022.11.23</title>
      <link>https://liyipu0805.github.io/%E6%97%A5%E8%AE%B0/20221123/</link>
      <pubDate>Wed, 23 Nov 2022 15:34:49 +0800</pubDate>
      
      <guid>https://liyipu0805.github.io/%E6%97%A5%E8%AE%B0/20221123/</guid>
      <description>——所谓爱隔山海,山海皆可平,山海平意难平 亲爱的安，见字如面，近来可好？
今天突然想到了《请回答1988》中的剧情，便去搜索了一下阿泽和德善的那段感情。
其实很早就发现了，大概是在表白的前一晚，我发现自己和阿泽的处境是如此像。有一个同样喜欢你的兄弟，有一个同样需要呵护的你，有一个同样不喜欢打没有把握的仗的我。那晚我想了很多很多，我深刻的明白，我表白的成功率很低很低，因为我已经错失了最佳的机会
但我并不自责，这是我的感情观，也是我的习惯路线，我忠于了自己的内心。
于是后来的故事人尽皆知，不出意外，你没有同意，时至今日，我也不清楚你是没有想好，还是郑重的拒绝了我。
今天思念又涌上心头了，不知道自己喜欢视奸的毛病什么时候才能改掉。看到你改了新的签名，新的头像，你的签名的点赞还是哪些人儿，从无到有，从有到无，人生还真是精彩。
我今天又想和你说说话了，感觉已经过了很久很久没有联系了。但我在想一个问题，我真的想和你做朋友吗？我已经说服自己了，是啊，我还喜欢你，我当然不甘心只做朋友，或许我可以继续找你，但我不想这么做了。这辈子，如果我们不能成为情侣，那就朋友也不要再做了吧。当然从熟悉到陌生再到熟悉，这需要一个过程，我想我已经主动了很久了，你能感受的到，剩下的交给你了，好吗？
就像阿泽等了德善六年，他这六年有多痛苦，我想我大概可以体会到，就算是阿泽这样主动的人，他依然告别了六年，我想我的告别也是可以被原谅的吧？我并不是不喜欢你了，相反我相信在此时此刻，我比世上任何人都喜欢你。
但是在不合适的时间，我还是保守点会比较好，对你而言是，对我而言更是。我想应该是这样吧。
我相信，有缘分的人，无论现在相隔多远，最终都会见面的。这也与我的人生经历如出一辙。我发自肺腑想念过的人，不论当时相隔了多远，相隔了多少年，现在仍然在我身边。所以我想，想念一定是会有回响的吧，我的执念神明一定能听到的吧。
是的，我没有停止祈祷，这已经成为了我的习惯，就像你的签名所述，我深刻的祈求神明能听到我的呼唤。你又为什么会发这样的签名呢，仅仅是因为喜欢这句话吗？想不明白。
我会用我的方式陪伴你，当然你不会感觉到。或许这是更适合我的陪伴方式吧，我相信有朝一日会有公开的一天，这些日记或者说随笔，也会被世人看到，至于你会不会看到，我也不清楚。就像我不知道你听了我的歌看了我的歌词，会有什么样的想法。
祝你安好。</description>
    </item>
    
    <item>
      <title>2022.11.21</title>
      <link>https://liyipu0805.github.io/%E6%97%A5%E8%AE%B0/20221121/</link>
      <pubDate>Wed, 23 Nov 2022 08:57:41 +0800</pubDate>
      
      <guid>https://liyipu0805.github.io/%E6%97%A5%E8%AE%B0/20221121/</guid>
      <description>&amp;mdash;-爱意随风起，风止意难平
亲爱的安，见字如面，你最近可好？
近来鲜有书信，也如往常一样，没有任何关于你的消息，未曾听闻你的近况。
一切好像要走上正轨了，我是说我好像已经要习惯这种生活了，每天上班也不再那么悲观，好像确实这份工作已经是尽可能好的选择了，朝九晚五，尽管压力很大，但好像去哪里压力都会大的吧。
对你的念想也不再那么煎熬，尽管我依然每天每时每刻回忆着过往的点滴，但我也渐渐冷静下来了。确实也有想过要不要去找你说说话，但我想你现在应该过得挺好吧，还是不要去打扰比较好。
你给我的视频点了赞，好像有点奇怪，并不是刚看到就点的赞，好像是看完之后又看了一遍？算了不想去猜，这说明你还把我当做朋友吗？
好像也不太重要了吧，我自己也不知道自己到底想要什么，但我明白我一定不甘心接受朋友的身份，或许多年以后我会欣然接受，但我想绝不是现在。所以估计会有很久很久不会再见面了吧，但我想我还是会给你写信。
时间过得真快，转眼又是跨年。秋意渐浓，寒冬将至，望保重。</description>
    </item>
    
    <item>
      <title>2022.11.17</title>
      <link>https://liyipu0805.github.io/%E6%97%A5%E8%AE%B0/20221107/</link>
      <pubDate>Thu, 17 Nov 2022 13:55:19 +0800</pubDate>
      
      <guid>https://liyipu0805.github.io/%E6%97%A5%E8%AE%B0/20221107/</guid>
      <description>可怜的蠢货从来都交不到好运 ——而这来自我那颓废的灵魂 亲爱的安，见字如面，你近来可好？
许久未见，满打满算也有20天了，这期间未曾听闻你的消息，你还好吗？
自那次争吵后（其实对我而言我不觉得是争吵，我只是想把一些东西问问清），我们好像彻底分开了，那次之后我们鲜有交流，我也能从对话之中寻到不情愿的味道。
这结果对我而言实在难以接受，但它确实发生了，我忠于了我的内心，问出了一直藏在心底的疑惑，只是好像疑惑并没有解开，反而化身一把刺刀刺进了更深的地方。
大概在2022.11.07，我明白了现在我的分享已经失去了任何意义了。你并不是不分享，对吗，只是我不再是值得的那个对象了。
这段时间我没有停止念想，尽管我每时每刻都在告诉自己，或许梦里都在劝说自己，要放下自己的执念，接受随之而来的结果，但我仍然沉溺在无端和无限的幻想中，幻想有一天我们还能和好如初。这种感觉，每一天都在杀死我，我已经找不到活下去的意义了。
同样的事情，两天前的某些时日也发生过，但是那个时候我没有来自工作的压力，没有对未来的彷徨，我只需要一股脑的玩游戏，一股脑的写代码，就能忘记一些不堪的回忆。
但是现在我的压力好像有点太重了，我背负了很多人的期望，这些期望化作了压力压在身上，我没有人可以去诉说。没有人愿意听，我也不想打扰任何一人，显得我只会emo，显得矫情。
其实我知道，如果我和你说说话的话，我的这些压力都会抛到脑后，只要你愿意还和我有关联，无论是朋友也好，我想我都会高兴一整天，一个表情，一些语气助词，都可以。
但是这些只能自己想想了，可能也再也没有机会收到了。
我每天因为你而浑浑噩噩，我不知道生活有什么意义，我没有继续活下去的动力，我该如何度过今后的每一天呢？
我很想告诉你我的情绪，但我不想再打扰了。没错，我又说了打扰，所以我即是可怜的小丑，也是可恨的元凶。因此我以这样的方式，写下我的心情实录，也许永远永远你都不会知道，这些话语也最终会遁入尘土。
他们说，念念不忘，必有回响，真的会有回响吗？我好想除了相信也别无选择。所以我向上帝祈祷，祈祷我们还能回到过去。神明会听到我的祷告吗？
总有一天我会把你忘记吧，我也没想到短短几个月的接触能让我受到如此的触动。可能最遗憾的就是你曾经也选择过我，也喜欢过我，但是当我想要抓住你的时候，你已经想要松开了。
我不知道我会写多久这样的日记，总之先这样吧，写到我忘记你吧。
——十一月的旧</description>
    </item>
    
    <item>
      <title>考试复习参考资料</title>
      <link>https://liyipu0805.github.io/python/kaoshi/</link>
      <pubDate>Wed, 15 Dec 2021 18:07:03 +0800</pubDate>
      
      <guid>https://liyipu0805.github.io/python/kaoshi/</guid>
      <description># 3.1 # 文件名：NewMath.py def NewAdd(a, b): return a + b def NewSub(a, b): return a - b def NewMul(a, b): return a * b def NewDiv(a, b): return a / b # 3.2  import re def main(): tel = input(&amp;#34;请输入手机号:&amp;#34;) # ret = re.match(r&amp;#34;1[35678]\d{9}&amp;#34;, tel) # 由于手机号位数大于11位也能匹配成功，所以修改如下： ret = re.match(r&amp;#34;^1[35678]\d{9}$&amp;#34;, tel) if ret: print(&amp;#34;匹配成功&amp;#34;) else: print(&amp;#34;匹配失败&amp;#34;) # 3.3 # 3.4 answer = &amp;#39;&amp;#39;&amp;#39;提供了大量函数，对于用户来说调用方便，功能全面，可以满足常规的全部功能， 其底层代码经过深度优化，相较于用户自定义函数来说，有更高的运算速度和更小的内存占用。 &amp;#39;&amp;#39;&amp;#39; # 3.5 3.5 使用Numpy生成数组以保存0~20之间的数字，并将其中所有偶数替换为0 import numpy as np data = np.</description>
    </item>
    
    <item>
      <title>通过PYTHON爬虫爬取明星的照片和资料</title>
      <link>https://liyipu0805.github.io/python/%E9%96%AB%E6%B0%B3%E7%B9%83python%E9%90%96%E6%AB%95%E9%90%96%E5%BD%87%E9%8F%84%E5%BA%A2%E6%A7%A6%E9%90%A8%E5%8B%AD%E5%8F%8E%E9%90%97%E5%9B%A7%E6%8B%B0%E7%92%A7%E5%8B%AC%E6%9E%A1/</link>
      <pubDate>Sun, 15 Aug 2021 19:02:03 +0800</pubDate>
      
      <guid>https://liyipu0805.github.io/python/%E9%96%AB%E6%B0%B3%E7%B9%83python%E9%90%96%E6%AB%95%E9%90%96%E5%BD%87%E9%8F%84%E5%BA%A2%E6%A7%A6%E9%90%A8%E5%8B%AD%E5%8F%8E%E9%90%97%E5%9B%A7%E6%8B%B0%E7%92%A7%E5%8B%AC%E6%9E%A1/</guid>
      <description>一.准备工作 1.选择合适的网站 这次爬虫的目的，是为了为人脸识别项目提供足量的数据集。所以要求目标网站必须符合：
 明星信息齐全（至少包含正脸照片和姓名） 网站结构简洁，利于格式化爬取。  通过不断的排查，最终锁定粉丝网。随手打开一位明星 发现信息齐全，并且域名非常有规律，只要改变s后面的数字，即可分分钟爬取成千上万的数据，就决定是你了！
2.安装MongoDB数据库 这么大量的数据需要用数据库来合理的储存，我们选择MongoDB来进行，因为它上手简单并且可以使用Python中的pymongo库操作。
安装过程请教百度喔
安装完成后我们选择robo 3T来可视化我们的数据库，界面如下： 非常的简洁明了！
3.导入依赖库 import requests import sys import re #用于正则化操作 from lxml import etree #上述用于爬虫 import pymongo as pm #链接mongoDB 二.开始爬虫 首先我们链接数据库
client = pm.MongoClient() db = client[&amp;#39;face&amp;#39;] #访问数据库 collection = db[&amp;#39;my_face&amp;#39;] #访问表 如果数据库和表不存在则会自动创建
接着我们构建请求头，来躲过网站的反爬虫机制。
headers = {&amp;#39;Referer&amp;#39;:&amp;#39;https://accounts.pixiv.net/loginlang=zh&amp;amp;source=pc&amp;amp;view_type=page&amp;amp;ref=wwwtop_accounts_index&amp;#39;, &amp;#39;User-Agent&amp;#39;:&amp;#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.146 Safari/537.36&amp;#39; } for j in range(1,5000): content1 = requests.</description>
    </item>
    
    <item>
      <title>逻辑斯蒂回归LogisticRegressor处理二分类任务</title>
      <link>https://liyipu0805.github.io/python/first/</link>
      <pubDate>Sun, 15 Aug 2021 16:45:14 +0800</pubDate>
      
      <guid>https://liyipu0805.github.io/python/first/</guid>
      <description>本系列为观看吴恩达老师的[中英字幕]吴恩达机器学习系列课程做的课堂笔记。图片来自视频截图。 不得不说，看了老师的视频真的学到了很多。即使数学不好的同志们也可以看懂，真的可谓是细致入微了。
一.逻辑斯蒂回归 1.模型 学过深度学习的同志们对这张图一定不陌生，它在神经网络中作为常用的激活函数，将输出值控制在0-1之间。他就是Sigmoid函数！当然它也被称为Logistic函数，这就是逻辑斯蒂回归算法的由来。
还有一点要注意的是，虽然名字叫做逻辑斯蒂回归，但他解决的其实是分类问题。其实原理很简单，对于二分类任务来说，大于0就是正类，小于0就是负类。对于多分类问题稍后再讨论。
def Sigmoid(x:np.array) -&amp;gt; np.array: return (1 / (1 + np.exp(-x))) 2.代价函数（损失函数） 即真实值为正类时，预测值越靠近1，损失越小，越靠近0，损失越大。 反之 简化之后 y为正类时，后一项为0，y为负类时，前一项为0。
最终的损失函数定义为： 是不是很眼熟？它就是大名鼎鼎的交叉熵损失函数的特殊形式！
pred为预测值，y为真实值，X为原始样本。 返回值前者为各个参数的损失值
3.优化算法 这里我们选择梯度下降算法。关于梯度下降具体介绍，这里不做延伸。只给出公式 alpha为学习率，后面的对损失函数的偏导可以写成这样的形式 看着复杂，其实就是同时更新所有的参数。注意要是同时喔。所以通过循环可以实现，但更推荐通过矩阵运算实现，这样更简洁高效。
配合代码更好理解~
def LossFuntion(pred, y, X): m = len(pred) sumloss = 0 for i,j,z in zip(pred, y, X): sumloss+= (i-j) * z return sumloss/m def GrandDesent(w, loss, alpha=0.01): update = w.T - alpha*loss return update 二.代码实现 1.二维二分类 这次使用鸢尾花数据集。先导包
import numpy as np from sklearn.</description>
    </item>
    
  </channel>
</rss>
